// Code generated by protoc-gen-dynamo v0.1.0. DO NOT EDIT.
// source: v1/example.proto

package v1

import (
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/cespare/xxhash/v2"
	"github.com/pquerna/protoc-gen-dynamo/pkg/protozstd"
	"strconv"
	"strings"
	"time"
)

func (p *Store) MarshalDynamo() (types.AttributeValue, error) {
	return p.MarshalDynamoDBAttributeValue()
}

func (p *Store) MarshalDynamoItem() (map[string]types.AttributeValue, error) {
	av, err := p.MarshalDynamoDBAttributeValue()
	if err != nil {
		return nil, err
	}
	avm, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return nil, fmt.Errorf("unable to marshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	return avm.Value, nil
}

func (p *Store) MarshalDynamoDBAttributeValue() (types.AttributeValue, error) {
	var sb strings.Builder
	var err error
	nullBoolTrue := true
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	v1 := &types.AttributeValueMemberS{Value: sb.String()}
	v2 := &types.AttributeValueMemberS{Value: "example"}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	v3 := &types.AttributeValueMemberS{Value: sb.String()}
	v4 := &types.AttributeValueMemberS{Value: "dummyvalue"}
	v5, err := p.Version()
	if err != nil {
		return nil, err
	}
	v6buf, err := protozstd.Marshal(p)
	if err != nil {
		return nil, err
	}
	v6 := &types.AttributeValueMemberB{Value: v6buf}
	v7 := &types.AttributeValueMemberS{Value: "examplepb.v1.Store"}
	var v8 types.AttributeValue
	if len(p.GetId()) != 0 {
		v8 = &types.AttributeValueMemberS{Value: p.GetId()}
	} else {
		v8 = &types.AttributeValueMemberNULL{Value: nullBoolTrue}
	}
	var av types.AttributeValue
	av = &types.AttributeValueMemberM{Value: map[string]types.AttributeValue{
		"expires_at":    &types.AttributeValueMemberN{Value: (strconv.FormatInt(int64(p.GetExpiresAt().AsTime().Round(time.Second).Unix()), 10))},
		"expires_at_ms": &types.AttributeValueMemberN{Value: (strconv.FormatInt(int64(p.GetExpiresAtMs().AsTime().Round(time.Millisecond).UnixNano()/int64(time.Millisecond)), 10))},
		"expires_at_ns": &types.AttributeValueMemberN{Value: (strconv.FormatInt(int64(p.GetExpiresAtNs().AsTime().UnixNano()), 10))},
		"gsi1pk":        v3,
		"gsi1sk":        v4,
		"pk":            v1,
		"sk":            v2,
		"store_id":      v8,
		"typ":           v7,
		"value":         v6,
		"version":       &types.AttributeValueMemberN{Value: (strconv.FormatInt(v5, 10))},
	}}
	return av, nil
}

func (p *User) MarshalDynamo() (types.AttributeValue, error) {
	return p.MarshalDynamoDBAttributeValue()
}

func (p *User) MarshalDynamoItem() (map[string]types.AttributeValue, error) {
	av, err := p.MarshalDynamoDBAttributeValue()
	if err != nil {
		return nil, err
	}
	avm, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return nil, fmt.Errorf("unable to marshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	return avm.Value, nil
}

func (p *User) MarshalDynamoDBAttributeValue() (types.AttributeValue, error) {
	var sb strings.Builder
	var err error
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	var pkskBuilder strings.Builder
	_, _ = pkskBuilder.WriteString(p.GetTenantId())
	_, _ = pkskBuilder.WriteString(":")
	_, _ = pkskBuilder.WriteString(p.GetId())
	pkskStr := pkskBuilder.String()
	hashValue := uint32(xxhash.Sum64String(pkskStr))
	shardId := hashValue % uint32(0x20)
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shardId), 10))
	v1 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString(p.GetId())
	v2 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.GetTenantId())
	v3 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString(p.GetIdpId())
	v4 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.GetTenantId())
	v5 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString(p.GetIdpId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatInt(int64(p.GetAnEnum()), 10))
	v6 := &types.AttributeValueMemberS{Value: sb.String()}
	v7, err := p.Version()
	if err != nil {
		return nil, err
	}
	v8buf, err := protozstd.Marshal(p)
	if err != nil {
		return nil, err
	}
	v8 := &types.AttributeValueMemberB{Value: v8buf}
	v9 := &types.AttributeValueMemberS{Value: "examplepb.v1.User"}
	v10 := &types.AttributeValueMemberBOOL{Value: p.GetDeletedAt().IsValid()}
	var av types.AttributeValue
	av = &types.AttributeValueMemberM{Value: map[string]types.AttributeValue{
		"deleted": v10,
		"gsi1pk":  v3,
		"gsi1sk":  v4,
		"gsi2pk":  v5,
		"gsi2sk":  v6,
		"pk":      v1,
		"sk":      v2,
		"typ":     v9,
		"value":   v8,
		"version": &types.AttributeValueMemberN{Value: (strconv.FormatInt(v7, 10))},
	}}
	return av, nil
}

func (p *StoreV2) MarshalDynamo() (types.AttributeValue, error) {
	return p.MarshalDynamoDBAttributeValue()
}

func (p *StoreV2) MarshalDynamoItem() (map[string]types.AttributeValue, error) {
	av, err := p.MarshalDynamoDBAttributeValue()
	if err != nil {
		return nil, err
	}
	avm, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return nil, fmt.Errorf("unable to marshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	return avm.Value, nil
}

func (p *StoreV2) MarshalDynamoDBAttributeValue() (types.AttributeValue, error) {
	var sb strings.Builder
	var err error
	nullBoolTrue := true
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store_v_2:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	v1 := &types.AttributeValueMemberS{Value: sb.String()}
	v2 := &types.AttributeValueMemberS{Value: "example"}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store_v_2:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	v3 := &types.AttributeValueMemberS{Value: sb.String()}
	v4 := &types.AttributeValueMemberS{Value: "dummyvalue"}
	v5, err := p.Version()
	if err != nil {
		return nil, err
	}
	v6buf, err := protozstd.Marshal(p)
	if err != nil {
		return nil, err
	}
	v6 := &types.AttributeValueMemberB{Value: v6buf}
	v7 := &types.AttributeValueMemberS{Value: "examplepb.v1.StoreV2"}
	var v8 types.AttributeValue
	if len(p.GetId()) != 0 {
		v8 = &types.AttributeValueMemberS{Value: p.GetId()}
	} else {
		v8 = &types.AttributeValueMemberNULL{Value: nullBoolTrue}
	}
	var av types.AttributeValue
	av = &types.AttributeValueMemberM{Value: map[string]types.AttributeValue{
		"expires_at":    &types.AttributeValueMemberN{Value: (strconv.FormatInt(int64(p.GetExpiresAt().AsTime().Round(time.Second).Unix()), 10))},
		"expires_at_ms": &types.AttributeValueMemberN{Value: (strconv.FormatInt(int64(p.GetExpiresAtMs().AsTime().Round(time.Millisecond).UnixNano()/int64(time.Millisecond)), 10))},
		"expires_at_ns": &types.AttributeValueMemberN{Value: (strconv.FormatInt(int64(p.GetExpiresAtNs().AsTime().UnixNano()), 10))},
		"gsi1pk":        v3,
		"gsi1sk":        v4,
		"pk":            v1,
		"sk":            v2,
		"store_id":      v8,
		"typ":           v7,
		"value":         v6,
		"version":       &types.AttributeValueMemberN{Value: (strconv.FormatInt(v5, 10))},
	}}
	return av, nil
}

func (p *UserV2) MarshalDynamo() (types.AttributeValue, error) {
	return p.MarshalDynamoDBAttributeValue()
}

func (p *UserV2) MarshalDynamoItem() (map[string]types.AttributeValue, error) {
	av, err := p.MarshalDynamoDBAttributeValue()
	if err != nil {
		return nil, err
	}
	avm, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return nil, fmt.Errorf("unable to marshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	return avm.Value, nil
}

func (p *UserV2) MarshalDynamoDBAttributeValue() (types.AttributeValue, error) {
	var sb strings.Builder
	var err error
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	_, _ = sb.WriteString(p.GetTenantId())
	v1 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString(p.GetId())
	v2 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	_, _ = sb.WriteString(p.GetTenantId())
	v3 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString(p.GetIdpId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetEmail())
	v4 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetIdpId())
	v5 := &types.AttributeValueMemberS{Value: sb.String()}
	sb.Reset()
	_, _ = sb.WriteString(strconv.FormatInt(int64(p.GetAnEnum()), 10))
	v6 := &types.AttributeValueMemberS{Value: sb.String()}
	v7, err := p.Version()
	if err != nil {
		return nil, err
	}
	v8buf, err := protozstd.Marshal(p)
	if err != nil {
		return nil, err
	}
	v8 := &types.AttributeValueMemberB{Value: v8buf}
	v9 := &types.AttributeValueMemberS{Value: "examplepb.v1.UserV2"}
	v10 := &types.AttributeValueMemberBOOL{Value: p.GetDeletedAt().IsValid()}
	var av types.AttributeValue
	av = &types.AttributeValueMemberM{Value: map[string]types.AttributeValue{
		"deleted": v10,
		"gsi1pk":  v3,
		"gsi1sk":  v4,
		"gsi2pk":  v5,
		"gsi2sk":  v6,
		"pk":      v1,
		"sk":      v2,
		"typ":     v9,
		"value":   v8,
		"version": &types.AttributeValueMemberN{Value: (strconv.FormatInt(v7, 10))},
	}}
	return av, nil
}

func (p *Store) UnmarshalDynamoDBAttributeValue(av types.AttributeValue) error {
	m, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	typ, ok := m.Value["typ"]
	if !ok {
		return fmt.Errorf("dynamo: typ missing")
	}
	t, ok := typ.(*types.AttributeValueMemberS)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberS, got %T", typ)
	}
	if t.Value != "examplepb.v1.Store" {
		return fmt.Errorf("dynamo: _type mismatch: examplepb.v1.Store expected, got: '%s'", typ)
	}
	value, ok := m.Value["value"]
	if !ok {
		return fmt.Errorf("dynamo: value missing")
	}
	v, ok := value.(*types.AttributeValueMemberB)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberB, got %T", value)
	}
	var data []byte
	data = v.Value
	return protozstd.Unmarshal(data, p)
}

func (p *Store) UnmarshalDynamo(av types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(av)
}

func (p *Store) UnmarshalDynamoItem(av map[string]types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(&types.AttributeValueMemberM{Value: av})
}

func (p *User) UnmarshalDynamoDBAttributeValue(av types.AttributeValue) error {
	m, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	typ, ok := m.Value["typ"]
	if !ok {
		return fmt.Errorf("dynamo: typ missing")
	}
	t, ok := typ.(*types.AttributeValueMemberS)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberS, got %T", typ)
	}
	if t.Value != "examplepb.v1.User" {
		return fmt.Errorf("dynamo: _type mismatch: examplepb.v1.User expected, got: '%s'", typ)
	}
	value, ok := m.Value["value"]
	if !ok {
		return fmt.Errorf("dynamo: value missing")
	}
	v, ok := value.(*types.AttributeValueMemberB)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberB, got %T", value)
	}
	var data []byte
	data = v.Value
	return protozstd.Unmarshal(data, p)
}

func (p *User) UnmarshalDynamo(av types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(av)
}

func (p *User) UnmarshalDynamoItem(av map[string]types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(&types.AttributeValueMemberM{Value: av})
}

func (p *StoreV2) UnmarshalDynamoDBAttributeValue(av types.AttributeValue) error {
	m, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	typ, ok := m.Value["typ"]
	if !ok {
		return fmt.Errorf("dynamo: typ missing")
	}
	t, ok := typ.(*types.AttributeValueMemberS)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberS, got %T", typ)
	}
	if t.Value != "examplepb.v1.StoreV2" {
		return fmt.Errorf("dynamo: _type mismatch: examplepb.v1.StoreV2 expected, got: '%s'", typ)
	}
	value, ok := m.Value["value"]
	if !ok {
		return fmt.Errorf("dynamo: value missing")
	}
	v, ok := value.(*types.AttributeValueMemberB)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberB, got %T", value)
	}
	var data []byte
	data = v.Value
	return protozstd.Unmarshal(data, p)
}

func (p *StoreV2) UnmarshalDynamo(av types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(av)
}

func (p *StoreV2) UnmarshalDynamoItem(av map[string]types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(&types.AttributeValueMemberM{Value: av})
}

func (p *UserV2) UnmarshalDynamoDBAttributeValue(av types.AttributeValue) error {
	m, ok := av.(*types.AttributeValueMemberM)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberM, got %T", av)
	}
	typ, ok := m.Value["typ"]
	if !ok {
		return fmt.Errorf("dynamo: typ missing")
	}
	t, ok := typ.(*types.AttributeValueMemberS)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberS, got %T", typ)
	}
	if t.Value != "examplepb.v1.UserV2" {
		return fmt.Errorf("dynamo: _type mismatch: examplepb.v1.UserV2 expected, got: '%s'", typ)
	}
	value, ok := m.Value["value"]
	if !ok {
		return fmt.Errorf("dynamo: value missing")
	}
	v, ok := value.(*types.AttributeValueMemberB)
	if !ok {
		return fmt.Errorf("unable to unmarshal: expected type *types.AttributeValueMemberB, got %T", value)
	}
	var data []byte
	data = v.Value
	return protozstd.Unmarshal(data, p)
}

func (p *UserV2) UnmarshalDynamo(av types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(av)
}

func (p *UserV2) UnmarshalDynamoItem(av map[string]types.AttributeValue) error {
	return p.UnmarshalDynamoDBAttributeValue(&types.AttributeValueMemberM{Value: av})
}

func (p *Store) Version() (int64, error) {
	err := p.GetUpdatedAt().CheckValid()
	if err != nil {
		return 0, err
	}
	t := p.GetUpdatedAt().AsTime()
	return t.UnixNano(), nil
}

func (p *Store) PartitionKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	return sb.String()
}

func StorePartitionKey(id *string, country *string, foo *uint64) string {
	return (&Store_builder{
		Country: country,
		Foo:     foo,
		Id:      id,
	}).Build().PartitionKey()
}

func (p *Store) SortKey() string {
	return "example"
}

func StoreSortKey() string {
	return (&Store_builder{}).Build().SortKey()
}

func (p *Store) Gsi1PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	return sb.String()
}

func StoreGsi1PkKey(id *string, country *string, foo *uint64) string {
	return (&Store_builder{
		Country: country,
		Foo:     foo,
		Id:      id,
	}).Build().Gsi1PkKey()
}

func (p *Store) Gsi1SkKey() string {
	return "dummyvalue"
}

func StoreGsi1SkKey() string {
	return (&Store_builder{}).Build().Gsi1SkKey()
}

func (p *User) Version() (int64, error) {
	err := p.GetUpdatedAt().CheckValid()
	if err != nil {
		return 0, err
	}
	t := p.GetUpdatedAt().AsTime()
	return t.UnixNano(), nil
}

func (p *User) PartitionKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	var pkskBuilder strings.Builder
	_, _ = pkskBuilder.WriteString(p.GetTenantId())
	_, _ = pkskBuilder.WriteString(":")
	_, _ = pkskBuilder.WriteString(p.GetId())
	pkskStr := pkskBuilder.String()
	hashValue := uint32(xxhash.Sum64String(pkskStr))
	shardId := hashValue % uint32(0x20)
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shardId), 10))
	return sb.String()
}

func UserPartitionKey(tenantId *string) string {
	return (&User_builder{TenantId: tenantId}).Build().PartitionKey()
}

func (p *User) SortKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.GetId())
	return sb.String()
}

func UserSortKey(id *string) string {
	return (&User_builder{Id: id}).Build().SortKey()
}

func (p *User) Gsi1PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.GetTenantId())
	return sb.String()
}

func UserGsi1PkKey(tenantId *string) string {
	return (&User_builder{TenantId: tenantId}).Build().Gsi1PkKey()
}

func (p *User) Gsi1SkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.GetIdpId())
	return sb.String()
}

func UserGsi1SkKey(idpId *string) string {
	return (&User_builder{IdpId: idpId}).Build().Gsi1SkKey()
}

func (p *User) Gsi2PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.GetTenantId())
	return sb.String()
}

func UserGsi2PkKey(tenantId *string) string {
	return (&User_builder{TenantId: tenantId}).Build().Gsi2PkKey()
}

func (p *User) Gsi2SkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.GetIdpId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatInt(int64(p.GetAnEnum()), 10))
	return sb.String()
}

func UserGsi2SkKey(idpId *string, anEnum *BasicEnum) string {
	return (&User_builder{
		AnEnum: anEnum,
		IdpId:  idpId,
	}).Build().Gsi2SkKey()
}

func (p *User) PartitionKeyWithShard(shard uint32) string {
	var sb strings.Builder
	_, _ = sb.WriteString("examplepb_v1_user:")
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shard), 10))
	return sb.String()
}

func (p *User) PartitionKeysWithShard() []string {
	keys := make([]string, 0, uint32(0x20))
	for i := uint32(0); i < uint32(0x20); i++ {
		keys = append(keys, p.PartitionKeyWithShard(i))
	}
	return keys
}

func (p *StoreV2) Version() (int64, error) {
	err := p.GetUpdatedAt().CheckValid()
	if err != nil {
		return 0, err
	}
	t := p.GetUpdatedAt().AsTime()
	return t.UnixNano(), nil
}

func (p *StoreV2) PartitionKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store_v_2:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	return sb.String()
}

func StoreV2PartitionKey(id *string, country *string, foo *uint64) string {
	return (&StoreV2_builder{
		Country: country,
		Foo:     foo,
		Id:      id,
	}).Build().PartitionKey()
}

func (p *StoreV2) SortKey() string {
	return "example"
}

func StoreV2SortKey() string {
	return (&StoreV2_builder{}).Build().SortKey()
}

func (p *StoreV2) Gsi1PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_store_v_2:")
	_, _ = sb.WriteString(p.GetId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetCountry())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(p.GetFoo()), 10))
	return sb.String()
}

func StoreV2Gsi1PkKey(id *string, country *string, foo *uint64) string {
	return (&StoreV2_builder{
		Country: country,
		Foo:     foo,
		Id:      id,
	}).Build().Gsi1PkKey()
}

func (p *StoreV2) Gsi1SkKey() string {
	return "dummyvalue"
}

func StoreV2Gsi1SkKey() string {
	return (&StoreV2_builder{}).Build().Gsi1SkKey()
}

func (p *UserV2) Version() (int64, error) {
	err := p.GetUpdatedAt().CheckValid()
	if err != nil {
		return 0, err
	}
	t := p.GetUpdatedAt().AsTime()
	return t.UnixNano(), nil
}

func (p *UserV2) PartitionKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	_, _ = sb.WriteString(p.GetTenantId())
	return sb.String()
}

func UserV2PartitionKey(tenantId *string) string {
	return (&UserV2_builder{TenantId: tenantId}).Build().PartitionKey()
}

func (p *UserV2) SortKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.GetId())
	return sb.String()
}

func UserV2SortKey(id *string) string {
	return (&UserV2_builder{Id: id}).Build().SortKey()
}

func (p *UserV2) Gsi1PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	if len(p.GetIdpId()) == 0 {
		panic(fmt.Sprintf("sharded key with strict=true: sort key field '%s' cannot be empty", "idp_id"))
	}
	if len(p.GetEmail()) == 0 {
		panic(fmt.Sprintf("sharded key with strict=true: sort key field '%s' cannot be empty", "email"))
	}
	var pkskBuilder strings.Builder
	_, _ = pkskBuilder.WriteString(p.GetTenantId())
	_, _ = pkskBuilder.WriteString(":")
	_, _ = pkskBuilder.WriteString(p.GetIdpId())
	_, _ = pkskBuilder.WriteString(":")
	_, _ = pkskBuilder.WriteString(p.GetEmail())
	pkskStr := pkskBuilder.String()
	hashValue := uint32(xxhash.Sum64String(pkskStr))
	shardId := hashValue % uint32(0x20)
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shardId), 10))
	return sb.String()
}

func UserV2Gsi1PkKey(tenantId *string) string {
	return (&UserV2_builder{TenantId: tenantId}).Build().Gsi1PkKey()
}

func (p *UserV2) Gsi1SkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(p.GetIdpId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetEmail())
	return sb.String()
}

func UserV2Gsi1SkKey(idpId *string, email *string) string {
	return (&UserV2_builder{
		Email: email,
		IdpId: idpId,
	}).Build().Gsi1SkKey()
}

func (p *UserV2) Gsi2PkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	var pkskBuilder strings.Builder
	_, _ = pkskBuilder.WriteString(p.GetTenantId())
	_, _ = pkskBuilder.WriteString(":")
	_, _ = pkskBuilder.WriteString(p.GetIdpId())
	_, _ = pkskBuilder.WriteString(":")
	_, _ = pkskBuilder.WriteString(strconv.FormatInt(int64(p.GetAnEnum()), 10))
	pkskStr := pkskBuilder.String()
	hashValue := uint32(xxhash.Sum64String(pkskStr))
	shardId := hashValue % uint32(0x20)
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetIdpId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shardId), 10))
	return sb.String()
}

func UserV2Gsi2PkKey(tenantId *string, idpId *string) string {
	return (&UserV2_builder{
		IdpId:    idpId,
		TenantId: tenantId,
	}).Build().Gsi2PkKey()
}

func (p *UserV2) Gsi2SkKey() string {
	var sb strings.Builder
	sb.Reset()
	_, _ = sb.WriteString(strconv.FormatInt(int64(p.GetAnEnum()), 10))
	return sb.String()
}

func UserV2Gsi2SkKey(anEnum *BasicEnum) string {
	return (&UserV2_builder{AnEnum: anEnum}).Build().Gsi2SkKey()
}

func (p *UserV2) Gsi1PartitionKeyWithShard(shard uint32) string {
	var sb strings.Builder
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shard), 10))
	return sb.String()
}

func (p *UserV2) Gsi1PartitionKeysWithShard() []string {
	keys := make([]string, 0, uint32(0x20))
	for i := uint32(0); i < uint32(0x20); i++ {
		keys = append(keys, p.Gsi1PartitionKeyWithShard(i))
	}
	return keys
}

func (p *UserV2) Gsi2PartitionKeyWithShard(shard uint32) string {
	var sb strings.Builder
	_, _ = sb.WriteString("examplepb_v1_user_v_2:")
	_, _ = sb.WriteString(p.GetTenantId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(p.GetIdpId())
	_, _ = sb.WriteString(":")
	_, _ = sb.WriteString(strconv.FormatUint(uint64(shard), 10))
	return sb.String()
}

func (p *UserV2) Gsi2PartitionKeysWithShard() []string {
	keys := make([]string, 0, uint32(0x20))
	for i := uint32(0); i < uint32(0x20); i++ {
		keys = append(keys, p.Gsi2PartitionKeyWithShard(i))
	}
	return keys
}

func (p *User) GetShardFromPartitionKey() (uint32, error) {
	pk := p.PartitionKey()
	parts := strings.Split(pk, ":")
	if len(parts) == 0 {
		return 0, fmt.Errorf("invalid key: empty")
	}
	lastPart := parts[len(parts)-1]
	shard, err := strconv.ParseUint(lastPart, 10, 32)
	if err != nil {
		return 0, fmt.Errorf("failed to parse shard from key: %w", err)
	}
	return uint32(shard), nil
}

func (p *User) GetShardCount() uint32 {
	return uint32(0x20)
}

func UserShardCount() uint32 {
	return uint32(0x20)
}

func (p *UserV2) GetGsi1ShardFromPartitionKey() (uint32, error) {
	pk := p.Gsi1PkKey()
	parts := strings.Split(pk, ":")
	if len(parts) == 0 {
		return 0, fmt.Errorf("invalid key: empty")
	}
	lastPart := parts[len(parts)-1]
	shard, err := strconv.ParseUint(lastPart, 10, 32)
	if err != nil {
		return 0, fmt.Errorf("failed to parse shard from key: %w", err)
	}
	return uint32(shard), nil
}

func (p *UserV2) GetGsi1ShardCount() uint32 {
	return uint32(0x20)
}

func UserV2Gsi1ShardCount() uint32 {
	return uint32(0x20)
}

func (p *UserV2) GetGsi2ShardFromPartitionKey() (uint32, error) {
	pk := p.Gsi2PkKey()
	parts := strings.Split(pk, ":")
	if len(parts) == 0 {
		return 0, fmt.Errorf("invalid key: empty")
	}
	lastPart := parts[len(parts)-1]
	shard, err := strconv.ParseUint(lastPart, 10, 32)
	if err != nil {
		return 0, fmt.Errorf("failed to parse shard from key: %w", err)
	}
	return uint32(shard), nil
}

func (p *UserV2) GetGsi2ShardCount() uint32 {
	return uint32(0x20)
}

func UserV2Gsi2ShardCount() uint32 {
	return uint32(0x20)
}
